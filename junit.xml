<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="1" time="21.971" timestamp="2022-10-20T18:18:08.364440" hostname="felurian"><testcase classname="tests.e2e.test_tenants" name="test_update_tenant_verifier_to_issuer" time="21.864"><failure message="AttributeError: 'AsyncClient' object has no attribute 'wallet'">tenant_admin_client = &lt;httpx.AsyncClient object at 0x1070a5370&gt;
tenant_admin_acapy_client = &lt;aries_cloudcontroller.acapy_client.AcaPyClient object at 0x1070a5640&gt;
governance_acapy_client = &lt;aries_cloudcontroller.acapy_client.AcaPyClient object at 0x107012a30&gt;

    @pytest.mark.asyncio
    async def test_update_tenant_verifier_to_issuer(
        tenant_admin_client: AsyncClient,
        tenant_admin_acapy_client: AcaPyClient,
        governance_acapy_client: AcaPyClient,
    ):
        name = uuid4().hex
        response = await tenant_admin_client.post(
            BASE_PATH,
            json={
                "image_url": "https://image.ca",
                "name": name,
                "roles": ["verifier"],
            },
        )
        assert response.status_code == 200
    
        tenant = response.json()
        tenant_id = tenant["tenant_id"]
        actor = await trust_registry.actor_by_id(tenant_id)
    
        wallet = await tenant_admin_acapy_client.multitenancy.get_wallet(
            wallet_id=tenant_id
        )
    
        acapy_token: str = tenant["access_token"].split(".", 1)[1]
        print('\n\n\n\n\n')
        print(acapy_token)
        print('\n\n\n\n\n')
    
        async with get_tenant_controller(Role.TENANT, acapy_token) as tenant_controller:
            connections = await tenant_controller.connection.get_connections(
                alias=f"Trust Registry {name}"
            )
    
        connection = connections.results[0]
    
        # Connection invitation
        assert_that(connection).has_state("invitation")
    
        assert actor
        assert_that(actor).has_name(name)
        assert_that(actor).has_did(ed25519_verkey_to_did_key(connection.invitation_key))
        assert_that(actor).has_roles(["verifier"])
    
        # Tenant
        assert_that(tenant).has_tenant_id(wallet.wallet_id)
        assert_that(tenant).has_image_url("https://image.ca")
        assert_that(tenant).has_tenant_name(name)
        assert_that(tenant).has_created_at(wallet.created_at)
        assert_that(tenant).has_updated_at(wallet.updated_at)
        assert_that(wallet.settings["wallet.name"]).is_length(32)
    
        new_name = uuid4().hex
        new_image_url = "https://some-ssi-site.org/image.png"
        new_roles = ["issuer", "verifier"]
    
        response = await tenant_admin_client.put(
            f"{BASE_PATH}/{tenant_id}",
            json={
                "image_url": new_image_url,
                "name": new_name,
                "roles": new_roles,
            },
        )
    
        assert response.status_code == 200
        new_tenant = response.json()
        print('\n\n\n\n\n')
        print(new_tenant)
        print('\n\n\n\n\n')
        # acapy_token: str = acapy_token.split(".", 1)[0]
        new_actor = await trust_registry.actor_by_id(tenant_id)
    
        endorser_did = await acapy_wallet.get_public_did(governance_acapy_client)
    
        # async with get_tenant_controller(Role.TENANT_ADMIN, acapy_token) as tenant_controller:
        async with tenant_client(token=tenant["access_token"]) as tenant_controller:
            print('\n\n\n\n\n')
            print(acapy_token)
            print('\n\n\n\n\n')
&gt;           public_did = await acapy_wallet.get_public_did(tenant_controller)

app/tests/e2e/test_tenants.py:288: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

controller = &lt;httpx.AsyncClient object at 0x1071d2d30&gt;

    async def get_public_did(controller: AcaPyClient) -&gt; Did:
        """Get the public did.
    
        Args:
            controller (AcaPyClient): aca-py client
    
        Raises:
            CloudApiException: if retrieving the public did failed.
    
        Returns:
            Did: the public did
        """
&gt;       result = await controller.wallet.get_public_did()
E       AttributeError: 'AsyncClient' object has no attribute 'wallet'

app/facades/acapy_wallet.py:108: AttributeError</failure></testcase></testsuite></testsuites>